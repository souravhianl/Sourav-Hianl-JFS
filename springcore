
------------Q1----------------------

interface BankAccountRepository{
    public double getBalance(long accountId);
    public double updateBalance(long accountID,double newBalance);
}
interface BankAccountService{
    public double withdraw(long accountId, double balance);
    public double deposit(long accountId, double balance);
    public double getBalance(long accountId);
    public boolean fundTransfer(long fromAccount, long toAccount, double amount);
}
class BankAccountRepositoryImpl implements BankAccountRepository{

    @Override
    public double getBalance(long accountId) {
        return 0;
    }

    @Override
    public double updateBalance(long accountID, double newBalance) {
        return 0;
    }
}

class BankAccountServiceImpl implements BankAccountService{

    @Override
    public double withdraw(long accountId, double balance) {
        return 0;
    }

    @Override
    public double deposit(long accountId, double balance) {
        return 0;
    }

    @Override
    public double getBalance(long accountId) {
        return 0;
    }

    @Override
    public boolean fundTransfer(long fromAccount, long toAccount, double amount) {
        return false;
    }
}
class BankAccount{
    long accountId;
    String accountHolderName;
    String accountType;
    long accountBalance;

    public BankAccount(long accountId, String accountHolderName, String accountType, long accountBalance) {
        this.accountId = accountId;
        this.accountHolderName = accountHolderName;
        this.accountType = accountType;
        this.accountBalance = accountBalance;
    }
}
class BankAccountController extends BankAccount {
    public BankAccountController(long accountId, String accountHolderName, String accountType, long accountBalance) {
        super(accountId, accountHolderName, accountType, accountBalance);
    }
    public double withdraw(long accountId, double balance){
    return 0;
    }
    public double deposit(long accountId, double balance){
        return 0;
    }
    public double getBalance(long accountId){
        return 0;
    }
    public boolean fundTransfer(long fromAccount, long toAccount){
        return false;
    }

}

public class BankRep {
    public static void main(String[] args) {

    }
}

------------Q2------------

import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.context.ApplicationContext;

import java.util.List;
import java.util.Map;
import java.util.Set;

class Question{
    private int questionId;
    private String question;
    private List<String> answer;
    //private Set<String> answer;
    //private Map<Integer,String> answer;

    //Constructor for maps case
    //public Question(int questionId, String question, Map<Integer, String> answer) {
    //    this.questionId = questionId;
    //     this.question = question;
    //    this.answer = answer;
    //}

    //Constructor For sets case
    //public Question(int questionId, String question, Set<String> answer) {
    //    this.questionId = questionId;
    //    this.question = question;
    //    this.answer = answer;
    //}

    //Constructor For Lists case
    public Question(int questionId, String question, List<String> answer) {
        this.questionId = questionId;
        this.question = question;
        this.answer = answer;
     }

    public int getQuestionId() {
        return questionId;
    }
    public String getQuestion() {
        return question;
    }

    //public Map<Integer, String> getAnswer() {
    //    return answer;
    //}
    //getter for sets case
    //public Set<String> getAnswers() {
    //    return answer;
    //}

    //getter for lists case
    public List<String> getAnswers() {
        return answer;
    }


    @Override
    public String toString() {
        return "Question{" +
                "questionId=" + questionId +
                ", question='" + question + '\'' +
                ", answer=" + answer +
                '}';
    }
}
public class Q2quiz {
    public static void main(String[] args) {
        ApplicationContext quizContext= new ClassPathXmlApplicationContext("quiz.xml");
        Question ques1 = (Question) quizContext.getBean("Question1");
        //Question ques2 = (Question) quizContext.getBean("Question2");
        //Question ques3 = (Question) quizContext.getBean("Question3");
        System.out.println(ques1);
        //System.out.println(ques2);
        //System.out.println(ques3);
    }
}


//XML file (quiz.xml) Uncomment per case and use
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN//EN" "http://www.springframework.org/dtd/spring-beans.dtd">

<beans>

<!-- Uncomment for Lists case-->
    <bean id="Question1" class="Capgemini.Spring.Question">
    <constructor-arg index="0" type="int" value="1"/>
    <constructor-arg index="1" value="What is inheritance?"/>
    <constructor-arg index="2">
            <list>
                <value>When baseclass inherits the properties of parent it's called inheritance</value>
            </list>
    </constructor-arg>
    </bean>



<!-- Uncomment for sets case-->
<!--    <bean id="Question2" class="Capgemini.Spring.Question">-->
<!--        <constructor-arg index="0" type="int" value="2"/>-->
<!--        <constructor-arg index="1" value="What is abstract class?"/>-->
<!--        <constructor-arg index="2">-->
<!--            <set>-->
<!--                <value>Abstract class can be inherited but cannot be instantiated</value>-->
<!--            </set>-->
<!--        </constructor-arg>-->
<!--    </bean>-->

<!-- Comment this Maps part to try others -->
<!--    <bean id="Question3" class="Capgemini.Spring.Question">-->
<!--        <constructor-arg index="0" type="int" value="3"/>-->
<!--        <constructor-arg index="1" value="What is data structure?"/>-->
<!--        <constructor-arg index="2">-->
<!--            <map key-type="java.lang.Integer" value-type="java.lang.String">-->
<!--                <entry key="3" value="It stores multiple types of data in a indexed form"/>-->
<!--            </map>-->
<!--        </constructor-arg>-->
<!--    </bean>-->
</beans>



//Test cases for question and all cases
import org.junit.jupiter.api.Test;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;

import static org.junit.jupiter.api.Assertions.*;
class QuestionTest {
    ApplicationContext quizContext= new ClassPathXmlApplicationContext("quiz.xml");
    Question ques1 = (Question) quizContext.getBean("Question1");
    @Test
    void getQuestionId() {
        assertEquals(1,ques1.getQuestionId());
    }

    @Test
    void getQuestion() {
        assertEquals("What is inheritance?",ques1.getQuestion());
    }
}

------------------------------Q3------------------------------------


//Repository class
import org.springframework.data.repository.CrudRepository;
@Repository
public interface employeeRepo extends CrudRepository<employee, String> {

}

//This is the serivce class
import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class employeeService {
	@Autowired
	private employeeRepo empRep;

	//Not needed as no reference to this list
	//List<employee> empList=new ArrayList<employee>();

	//To return all employees to controller
	public List<employee> allEmp() {
		List<employee> emp=  new ArrayList<employee>();
		empRep.findAll().forEach(emp::add);
		return emp;
	}

	//To find one employee with its id
	public employee getEmp(String id) {
		return empRep.findById(id).orElse(null);
	}

	//To add a new employee
	public void addemp(employee e) {
		empRep.save(e);
	}
	//To delete an employee
	public String delEmp(String id) {
		empRep.deleteById(id);
		return "Employee delete success";
	}

	public employee updateEmp(employee e) {
		employee existingEmp=empRep.findById(e.getid()).orElse(null);
		existingEmp.setEmployeeName(e.getEmployeeName());
		existingEmp.setEmployeeDepartment(e.getEmployeeDepartment());
		existingEmp.setEmployeeDesignation(e.getEmployeeDesignation());
		existingEmp.setEmployeeSalary(e.getEmployeeSalary());
		return empRep.save(existingEmp);
	}

}

//This is the controller class
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class EmployeeController {

	@Autowired
	employeeService empSer;


	@GetMapping("/employee")
	//To get the list of all employees in JSON format
	public List<employee> allemployees() {
		return empSer.allEmp();
	}

	@GetMapping("/employee/{id}")
	public employee getOne(@PathVariable String id) {
		return empSer.getEmp(id);
	}

	@PostMapping("/employee")
	public void addemp(@RequestBody employee obj) {
		empSer.addemp(obj);
	}

	@DeleteMapping("/employee/{id}")
	public String DelOne(@PathVariable String id) {
		return empSer.delEmp(id);
	}
	@PutMapping("/employee")
	public employee updateOne(@RequestBody employee e) {
		return empSer.updateEmp(e);
	}
}


//This is the employee class
import javax.persistence.Entity;
import javax.persistence.Id;

@Entity
public class employee {

	@Id
	String id;
	String employeeName;
	String employeeDepartment;
	String employeeDesignation;
	String employeeSalary;

	public employee() {

	}

	public employee(String id, String employeeName, String employeeDepartment, String employeeDesignation,
			String employeeSalary) {
		super();
		this.id = id;
		this.employeeName = employeeName;
		this.employeeDepartment = employeeDepartment;
		this.employeeDesignation = employeeDesignation;
		this.employeeSalary = employeeSalary;
	}

	public String getid() {
		return id;
	}
	public void setid(String id) {
		this.id = id;
	}
	public String getEmployeeName() {
		return employeeName;
	}
	public void setEmployeeName(String employeeName) {
		this.employeeName = employeeName;
	}
	public String getEmployeeDepartment() {
		return employeeDepartment;
	}
	public void setEmployeeDepartment(String employeeDepartment) {
		this.employeeDepartment = employeeDepartment;
	}
	public String getEmployeeDesignation() {
		return employeeDesignation;
	}
	public void setEmployeeDesignation(String employeeDesignation) {
		this.employeeDesignation = employeeDesignation;
	}
	public String getEmployeeSalary() {
		return employeeSalary;
	}
	public void setEmployeeSalary(String employeeSalary) {
		this.employeeSalary = employeeSalary;
	}

}

//application.properties file
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
spring.jpa.hibernate.ddl-auto=update

-----------------------Q4----------------------------------

import org.springframework.beans.factory.annotation.Required;
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;

class human{
    String name;

    phone p;

    @Resource
    gender g;

    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
    public gender getG() {
        return g;
    }
    public void setG(gender g) {
        this.g = g;
    }

    public phone getP() {
        return p;
    }
    @Required
    public void setP(phone p) {
        this.p = p;
    }

    @Override
    public String toString() {
        return "human{" +
                "name='" + name + '\'' +
                ", p=" + p +
                ", g=" + g +
                '}';
    }
}
@Component
class gender{
    String gender;

    public String getGender() {
        return gender;
    }
    public void setGender(String gender) {
        this.gender = gender;
    }

    @Override
    public String toString() {
        return "gender{" +
                "gender='" + gender + '\'' +
                '}';
    }
}
@Component
class phone{
    long number;

    public phone(long number) {
        this.number = number;
    }


    @Override
    public String toString() {
        return "phone{" +
                "number=" + number +
                '}';
    }
}
public class Q5 {
    public static void main(String[] args) {
        ApplicationContext context = new ClassPathXmlApplicationContext("human.xml");
        human humanBeing = (human) context.getBean("Human");
        gender gender =humanBeing.getG();
        phone no=humanBeing.getP();
        System.out.println(gender);
        System.out.println(no);
        System.out.println(humanBeing);
    }
}



//XML file for the question (human.xml)
<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
    <context:annotation-config/>
    <bean id="Human" class="Capgemini.Spring.human">
        <property name="name" value="Vivek Shukla"/>
        <property name="p" ref="phone"/>
    </bean>
    <bean id="gender" class="Capgemini.Spring.gender">
        <property name="gender" value="male"/>
    </bean>
    <bean id="phone" class="Capgemini.Spring.phone">
        <constructor-arg index="0" type="long" value="9911964666"/>
    </bean>
</beans>
